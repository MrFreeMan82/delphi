unit uAccessRightRule;

interface
uses SysUtils, Classes, uData;

  procedure SetWindowAccessState(userType:integer; window:TComponent);
implementation


function isOurUserType(ut_id: integer; enabledUsers: string):boolean;
var sl: TStringList;
    i:integer;
begin
     if enabledUsers = '*' then exit(true);

     i := 0;
     result := false;
     sl := TStringList.Create;
     sl.Delimiter := ';';
     sl.StrictDelimiter := true;
     sl.Text := trim(enabledUsers);

     while (result <> true) or (i < sl.Count) do
     begin
          result := strToInt(sl[i]) = ut_id;
          inc(i);
     end;

end;

procedure ApplyRule(ut_id: integer;
										window: TComponent;
										enabledUsers, targetObject, checkObject, checkMode:string;
										checkObjectValue: double;
										action: String);
begin
      if not isOurUserType(ut_id, enabledUsers) then exit;

end;

       // Находит все правила, связанные с этим окном, и устанавливает их
procedure SetWindowAccessState(userType:integer; window:TComponent);

begin
     data.qAccessRight.Close;
     data.qAccessRight.ParamByName('wnd').AsString := window.Name;
     data.qAccessRight.Open;

     if data.qAccessRight.IsEmpty then exit;

     while not data.qAccessRight.Eof do
     begin
        ApplyRule(userType,
                  window,
                  data.qAccessRightARR_USER_TYPES.AsString,
                  data.qAccessRightARR_TARGET_OBJECT_NAME.AsString,
                  data.qAccessRightARR_CHECK_OBJECT_NAME.AsString,
                  data.qAccessRightARR_CHECK_MODE.AsString,
                  data.qAccessRightARR_CHECK_OBJECT_VALUE.AsFloat,
                  data.qAccessRightARR_ACTION.AsString);

        data.qAccessRight.Next
     end;

end;

end.
